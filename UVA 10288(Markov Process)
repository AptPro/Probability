//UVA 10288
#include <iostream>
#include <cmath>
using namespace std;
typedef long long ll;
ll gcd(ll a,ll b) {
	return b==0?a:gcd(b,a%b);

}
struct Frac {
	ll num;
	ll den;
	Frac(ll num=0,ll den=1) {
		if(den<0) {
			num=-num;
			den=-den;
		}
		ll g=gcd(abs(num),den);
		this->num=num/g;
		this->den=den/g;
	}
	Frac operator +(const Frac& o) const {
		return Frac(num*o.den+den*o.num,den*o.den); 
	}
	Frac operator -(const Frac& o) const {
		return Frac(num*o.den-den*o.num,den*o.den);
	}
	Frac operator *(const Frac& o) const {
		return Frac(num*o.num,den*o.den);
	}
	Frac operator /(const Frac& o) const {
		return Frac(num*o.den,den*o.num);
	}
	bool operator <(const Frac& o) const {
		return num*o.den<den*o.num;
	}
	bool operator ==(const Frac& o) const {
		return num*o.den==den*o.num;
	}
}f[50];
int main() {
	int n;
	while(cin>>n) {
		for(int i=1;i<=n;i++) f[i]=f[i-1]+Frac(n,i);
		if(f[n].den==1) cout<<f[n].num<<endl;
		else {
			ll a=f[n].num/f[n].den;
			f[n].num-=a*f[n].den;
			ll cnt1=0,cnt2=0,x=f[n].den,y=a;
			while(x) {
				cnt1++;
				x/=10;
			}
			while(y) {
				cnt2++;
				y/=10;
			}
			for(int i=0;i<=cnt2;i++) cout<<' ';
			cout<<f[n].num<<endl;
			cout<<a<<' ';
			for(int i=0;i<cnt1;i++) cout<<'-';
			cout<<endl;
			for(int i=0;i<=cnt2;i++) cout<<' ';
			cout<<f[n].den<<endl;
		}
	}
	return 0;
}
